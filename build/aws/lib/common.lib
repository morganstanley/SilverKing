
function f_aws_getBuild_RunOutputFilename {
	echo $(f_getRunOutputFilename_Helper "$1")
}

function f_aws_downloadTar {
	typeset tar=$1
	typeset url=$2
	
    typeset wgetOption;
    typeset tarOption;
    if [[ $QUIET_OUTPUT == "true" ]]; then
        wgetOption="-nv"
    else
        tarOption="-v"
    fi
    
	cd $LIB_ROOT
	wget $wgetOption --progress=bar:force:noscroll $url # see the manpage for 'nv' or '--progress=type', https://stackoverflow.com/questions/4686464/how-to-show-wget-progress-bar-only
	tar $tarOption -xf $tar # -f is for file and needs its filename param to be immediately after, so can't do '-xfv $tar'
	rm $tar
}

function f_aws_downloadJar {
	typeset url=$1
	
	curl -O $url
}

function f_aws_replaceLine {
	typeset oldLine=$1
	typeset newLine=$2
	typeset filename=$3
	typeset admin=$4
	
	$admin sed -i "/${oldLine}/c${newLine}" $filename
}

function f_aws_addHostToEtcHosts {
    typeset etcHostsFile=/etc/hosts
    typeset count=`grep \`hostname\` $etcHostsFile -c`
    if [[ $count -eq 0 ]]; then
        echo `/sbin/ifconfig eth0 | grep "inet addr" | awk '{print $2}' | cut -d : -f 2; hostname` | sudo tee -a $etcHostsFile
    fi
}

function f_aws_generatePrivateKey {
	cd ~/.ssh
	typeset publicKeyFilename="id_rsa.pub"
	if [[ ! -f $publicKeyFilename ]]; then
		ssh-keygen -f id_rsa -N '' # flags -f,-N are to bypass prompt
		cat $publicKeyFilename >> authorized_keys
	fi
}

# sudo yum install ant - is installing 1.8 and we need 1.9
# download binary file @ http://archive.apache.org/dist/ant/binaries/ or www.apache.org/dist/ant/binaries
function f_aws_install_ant {
    echo "installing ant"
    cd $LIB_ROOT
    typeset ant_version="apache-ant-1.10.0"
    typeset ant_tar=$ant_version-bin.tar.bz2
    f_aws_downloadTar "$ant_tar" "http://archive.apache.org/dist/ant/binaries/$ant_tar"
    
    f_fillInBuildConfigVariable "ANT_9_HOME" "$LIB_ROOT/$ant_version"
}

function f_aws_install_zk {
    echo "installing zk"
    cd $LIB_ROOT
    typeset zk_tar=$ZK_VERSION.tar.gz
    f_aws_downloadTar "$zk_tar" "http://apache.claz.org/zookeeper/$ZK_VERSION/$zk_tar"

    cd $ZK_VERSION/conf
    echo "tickTime=2000
    dataDir=/var/tmp/zookeeper
    clientPort=2181" > zoo.cfg
}

function f_aws_fillin_vars {        
    f_fillInBuildConfigVariable "SK_REPO_HOME" "$sk_repo_home"
    f_fillInBuildConfigVariable "PERL_5_8"     "/usr/bin/perl"
}

function f_aws_install_boost {
    echo "installing boost"
    cd $LIB_ROOT
    typeset boost_version="boost_1_61_0"
    typeset boost_tar=$boost_version.tar.gz
    f_aws_downloadTar "$boost_tar" "https://downloads.sourceforge.net/project/boost/boost/1.61.0/$boost_tar"

    f_overrideBuildConfigVariable "BOOST_INC" "$LIB_ROOT/$boost_version"
}

function f_aws_install_jace {
    echo "installing jace"
    cd $LIB_ROOT
    
    typeset jar_url="search.maven.org/remotecontent?filepath=com/googlecode/jace"
    f_aws_downloadJar "$jar_url/$JACE_RUNTIME/1.2.22/$JACE_RUNTIME_JAR"
    f_aws_downloadJar "$jar_url/$JACE_CORE/1.2.22/$JACE_CORE_JAR"
}

function f_aws_symlink_jace {
    cd $LIB_ROOT
    typeset jace_lib=libs/jace
    mkdir -p $jace_lib
    cd $jace_lib
    ln -s $sk_repo_home/src/jace/include include
    mkdir lib
    cd lib
    ln -s ../../../$JACE_RUNTIME_JAR jace-runtime.jar
    ln -s ../../../$JACE_CORE_JAR    jace-core.jar
    mv $INSTALL_ARCH_LIB_DIR/jace/dynamic .
    f_fillInBuildConfigVariable "JACE_HOME" "$LIB_ROOT/$jace_lib"
}

function f_aws_buildConfig_check {
    echo
    echo "build.config looks like:"
    cat $BUILD_CONFIG_FILE
    
    echo
    echo "Checking build.config"
    $BUILD_DIR/check_config.sh
}

function f_aws_edit_config_files {
    f_fillInSkfsConfigVariable  "fuseLib" "$FUSE_LIB"
    f_fillInSkfsConfigVariable  "fuseBin" "/bin"   # for /bin/fusermount
    f_fillInSkConfig

    f_aws_replaceLine "user_allow_other" "user_allow_other" "/etc/fuse.conf" "sudo"
}

function f_aws_symlink_skjar_for_skc {
    cd $LIB_DIR
    ln -s $SILVERKING_JAR
}

function f_aws_checkBuildConfig_fillInConfigs_andRunEverything {
    f_aws_buildConfig_check
    
    source $BUILD_CONFIG_FILE
    
    ls -l $FUSE_INC
    ls -l $FUSE_LIB    
    ls -l $LIB_ROOT/SilverKing
    ls -l $LIB_ROOT
    ls -l $LIB_ROOT/jdk1.7.0_80/
    ls -l $GCC_LIB/
    
    f_aws_edit_config_files
    f_aws_symlink_skjar_for_skc

    $AWS_DIR/$ZK_START_SCRIPT_NAME
    $BUILD_DIR/$BUILD_SCRIPT_NAME
    $AWS_DIR/$ZK_STOP_SCRIPT_NAME
}

# LIB_ROOT should be at the same level as the cloned "SilverKing" repo
# travis-ci sets LIB_ROOT
if [[ -z $LIB_ROOT ]]; then
    LIB_ROOT=~
fi
JACE_RUNTIME="jace-core-runtime"
JACE_CORE="jace-core-java"
JACE_RUNTIME_JAR=$JACE_RUNTIME-1.2.22.jar
JACE_CORE_JAR=$JACE_CORE-1.2.22.jar

ZK_VERSION="zookeeper-3.4.12"
    
NONLAUNCH_HOST_LIST_FILENAME="multi_nonlaunch_machines_list.txt"
# SSH_OPTIONS="-v -x -o StrictHostKeyChecking=no"
SSH_OPTIONS="-x -o StrictHostKeyChecking=no"